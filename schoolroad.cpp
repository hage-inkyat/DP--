/*太郎君の住んでいるJOI市は， 南北方向にまっすぐに伸びるa本の道路と，
東西方向にまっすぐに伸びるb本の道路により， 碁盤の目の形に区分けされている．
南北方向のa本の道路には，西から順に1,2,.....,aの番号が付けられている．
また，東西方向のb本の道路には，南から順に1,2,..., bの番号が付けられている．
西からi番目の南北方向の道路と，南からj番目の東西方向の道路が交わる交差点
を(i; j)で表す．太郎君は，交差点(1;1)の近くに住んでおり， 交差点(a; b)の近くのJOI高校に自転車で通っている．
自転車は道路に沿ってのみ移動することができる．太郎君は，通学時間を短くするため， 
東または北にのみ向かって移動して通学している．現在，JOI市では，n個の交差点(x1; y1);(x2; y2); :::;(xn; yn)で工事を行っている．
太郎君は工事中の交差点を通ることができない．太郎君が交差点(1;1)から交差点(a; b)まで，工事中の交差点を避けながら，
東または北にのみ向かって移動して通学する方法は何通りあるだろうか．太郎君の通学経路の個数mを求めるプログラムを作成せよ．
データセットは複数与えられ,各データセットの形式は以下のようになっています.入力の終わりはゼロを２つ含む行で示されます
*/
#include<bits/stdc++.h>
using namespace std;
int main(){
    int a,b;
    while( cin >> a >> b , a || b ){
        int n, dp[20][20] = {0};
        dp[1][1] = 1;
        cin >> n;
        for(int i=0 ; i < n ; i++ ){
            int x,y;
            cin >> x >> y;
            dp[y][x] = -1; //交差点(x,y)までの経路の数が求まっていないので-1で初期化する
        }
        for(int y=1 ; y <= b ; y++ ){
            for(int x=1 ; x <= a ; x++ ){
                if( dp[y][x] != -1 ){
                    if( y != 1 && dp[y-1][x] != -1 ){
                        dp[y][x] += dp[y-1][x];
                    }
                    if( x != 1 && dp[y][x-1] != -1 ){
                        dp[y][x] += dp[y][x-1];
                    }
                }
            }
        }// (a,b)までの経路の数を出力
        cout << dp[b][a] << endl;
    }
    return(0);
}